diff --git a/redfish-core/lib/systems.hpp b/redfish-core/lib/systems.hpp
index 864a8d96..0a8c850d 100644
--- a/redfish-core/lib/systems.hpp
+++ b/redfish-core/lib/systems.hpp
@@ -605,6 +605,194 @@ inline void getHostState(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
         });
 }
 
+inline void getCpldCpuaInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    BMCWEB_LOG_DEBUG << "Get cpld cpua information.";
+    sdbusplus::asio::getProperty<std::string>(
+        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
+        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
+        "CurrentCPUAPWState",
+        [aResp](const boost::system::error_code ec,
+                const std::string& hostState) {
+        if (ec)
+        {
+            if (ec == boost::system::errc::host_unreachable)
+            {
+                // Service not available, no error, just don't return
+                // host state info
+                BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                return;
+            }
+            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+            messages::internalError(aResp->res);
+            return;
+        }
+
+        BMCWEB_LOG_DEBUG << "Cpua PW state: " << hostState;
+
+       std::cout << "Cpua PW state:" << hostState <<std:: endl;
+
+        aResp->res.jsonValue["CpuaPWInfo"] = hostState;
+        });
+}
+inline void getCpldCpubInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    BMCWEB_LOG_DEBUG << "Get cpld cpub information.";
+    sdbusplus::asio::getProperty<std::string>(
+        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
+        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
+        "CurrentCPUBPWState",
+        [aResp](const boost::system::error_code ec,
+                const std::string& hostState) {
+        if (ec)
+        {
+            if (ec == boost::system::errc::host_unreachable)
+            {
+                // Service not available, no error, just don't return
+                // host state info
+                BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                return;
+            }
+            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+            messages::internalError(aResp->res);
+            return;
+        }
+
+        BMCWEB_LOG_DEBUG << "Cpub PW state: " << hostState;
+
+       std::cout << "Cpub PW state:" << hostState <<std:: endl;
+
+        aResp->res.jsonValue["CpubPWInfo"] = hostState;
+        });
+}
+inline void getCpldCpuoInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    BMCWEB_LOG_DEBUG << "Get cpld  cpuo information.";
+    sdbusplus::asio::getProperty<std::string>(
+        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
+        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
+        "CurrentCPUOtherPWState",
+        [aResp](const boost::system::error_code ec,
+                const std::string& hostState) {
+        if (ec)
+        {
+            if (ec == boost::system::errc::host_unreachable)
+            {
+                // Service not available, no error, just don't return
+                // host state info
+                BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                return;
+            }
+            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+            messages::internalError(aResp->res);
+            return;
+        }
+
+        BMCWEB_LOG_DEBUG << "Cpuo PW state: " << hostState;
+
+       std::cout << "Cpuo PW state:" << hostState <<std:: endl;
+
+        aResp->res.jsonValue["CpuoPWInfo"] = hostState;
+        });
+}
+inline void getCpldOtherPwInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    BMCWEB_LOG_DEBUG << "Get cpld otherPw information.";
+    sdbusplus::asio::getProperty<std::string>(
+        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
+        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
+        "CurrentOtherPWState",
+        [aResp](const boost::system::error_code ec,
+                const std::string& hostState) {
+        if (ec)
+        {
+            if (ec == boost::system::errc::host_unreachable)
+            {
+                // Service not available, no error, just don't return
+                // host state info
+                BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                return;
+            }
+            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+            messages::internalError(aResp->res);
+            return;
+        }
+
+        BMCWEB_LOG_DEBUG << "other PW state: " << hostState;
+
+       std::cout << "other PW state:" << hostState <<std:: endl;
+
+        aResp->res.jsonValue["OtherPWInfo"] = hostState;
+        });
+}
+inline void getCpldPsuInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    BMCWEB_LOG_DEBUG << "Get cpld psu information.";
+    sdbusplus::asio::getProperty<std::string>(
+        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
+        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
+        "CurrentPSUState",
+        [aResp](const boost::system::error_code ec,
+                const std::string& hostState) {
+        if (ec)
+        {
+            if (ec == boost::system::errc::host_unreachable)
+            {
+                // Service not available, no error, just don't return
+                // host state info
+                BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                return;
+            }
+            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+            messages::internalError(aResp->res);
+            return;
+        }
+
+        BMCWEB_LOG_DEBUG << "psu PW state: " << hostState;
+
+       std::cout << "psu PW state:" << hostState <<std:: endl;
+
+        aResp->res.jsonValue["PsuInfo"] = hostState;
+        });
+}
+inline void getCpldEfuseInfo(const std::shared_ptr<bmcweb::AsyncResp>& aResp)
+{
+    BMCWEB_LOG_DEBUG << "Get cpld efuse information.";
+    sdbusplus::asio::getProperty<std::string>(
+        *crow::connections::systemBus, "xyz.openbmc_project.State.Host",
+        "/xyz/openbmc_project/state/host0", "xyz.openbmc_project.State.Host",
+        "CurrentEFUState",
+        [aResp](const boost::system::error_code ec,
+                const std::string& hostState) {
+        if (ec)
+        {
+            if (ec == boost::system::errc::host_unreachable)
+            {
+                // Service not available, no error, just don't return
+                // host state info
+                BMCWEB_LOG_DEBUG << "Service not available " << ec;
+                return;
+            }
+            BMCWEB_LOG_ERROR << "DBUS response error " << ec;
+            messages::internalError(aResp->res);
+            return;
+        }
+
+        BMCWEB_LOG_DEBUG << "efuse PW state: " << hostState;
+
+       std::cout << "efuse PW state:" << hostState <<std:: endl;
+
+        aResp->res.jsonValue["EfusInfo"] = hostState;
+        });
+}
+
+
+
+
+
+
+
+
 /**
  * @brief Translates boot source DBUS property value to redfish.
  *
@@ -3007,6 +3195,12 @@ inline void requestRoutesSystems(App& app)
         getIndicatorLedState(asyncResp);
         getComputerSystem(asyncResp, health);
         getHostState(asyncResp);
+        getCpldCpuaInfo(asyncResp);
+        getCpldCpubInfo(asyncResp);
+        getCpldCpuoInfo(asyncResp);
+        getCpldOtherPwInfo(asyncResp);
+        getCpldPsuInfo(asyncResp);
+        getCpldEfuseInfo(asyncResp);
         getBootProperties(asyncResp);
         getBootProgress(asyncResp);
         getBootProgressLastStateTime(asyncResp);
